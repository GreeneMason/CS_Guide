# Data types/Object oriented proramming
Bespoke abstract data types developed for a specific task or library. Used like you would use a String or int. 

### Checklist
- The class with custom data types is in the same directory  
- The syntax is custom_data variable_name = arguement/declaration;  
- The method is a compatible static or an instance method with the client side code  

### Class
A class is saved with the same name as the file name or vice versa. A class can be used to implement a custom data type which commes with the instance variables, constructors, and instance methods.  

### Abstraction
Data abstraction is the creation of a custom data type.  

### Constructor
A constructor is like a template to create a new object with a reference to said object. Using the 'new' before declaring the constructor to create a new object.  

### Object references
Constructors create objects and return the reference for said object to the client.  
An object can be referenced, that reference can be changed. But if you change an object everywhere that object is referenced will be changed.   

### Instance variables
The variables declared at the very top of a class, they can be any data type. 

### Instance methods
They are exactly like static methods except you dont put static in the signature and they are able to perform actions with instance variables.  

### Aliasing 
When you reference the same object twice the variables are copies of the same reference, this is unique to reference types meaning this is not true for primative data.   
This means when you compare (ie; (x == y)) two object references it will check if they both point to the same object.   

### Orphan object 
An object that is no longer being referenced and thus no longer within the scope of the program.   

### API's (Application programming interface)
- Color   
- Picture  
- String   
- In  
- Out  
- Draw  

"Whenever you can clearly separate  data and associated operations within a program, you should do so."  
Sedgewick, Robert; Wayne, Kevin. Computer Science: An Interdisciplinary Approach (p. 382).  
